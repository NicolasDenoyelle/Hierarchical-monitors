%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                            EXAMPLES                           %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Obtaining some system infos %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Display for each processing unit the current load as htop does.
cpu_load{
	OBJ:= PU;
	PERF_LIB:=proc;
	EVSET:=cpuload;
	OUTPUT:=0; %do not output to trace
	DISPLAY:=1; %hmonitor -d (option required)
}

LST_INS{
	OBJ:= PU:0;
	PERF_LIB:=papi;
	EVSET:=PAPI_LST_INS;
}

%% Display memory footprint on each memory
memload{
	OBJ:=Node;
	PERF_LIB:=proc;
	EVSET:=memused;
	OUTPUT:=0; %do not output to trace
	DISPLAY:=1; %hmonitor -d (option required)
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%
% Connecting monitors %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Test monitor, output event value 1.0 always.
% fake{
% 	OBJ:=Core;
% 	PERF_LIB:=fake;
% 	EVSET:=FAKE;
% }

%% Accumulate each output event from children monitors (result is the number of cores).
%accumulation{
%	OBJ:=Machine;
%	PERF_LIB:=accumulate;
%	EVSET:=fake;
%}

%% Make an input eventset on Machine, out of joined children "fake" monitors output.
%hierarchical{
%	OBJ:=Machine;
%	PERF_LIB:=hierarchical;
%	EVSET:=fake;
%}

%% Reduce input events into output samples
%reduction{
%	OBJ:=Core;
%	PERF_LIB:=hierarchical;
%	EVSET:=fake; %(assumes 2 PU per Core)
%	REDUCTION:= two=$0+$1, one=$0+$1/2; %syntax: output0=input1 OP inputk... , output1=...
%}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Computing miss balance on L2 caches %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Create monitor for recording L2 cache misses (event on PU)
% L2_MISS_PU{
% 	OBJ:=PU;
% 	PERF_LIB:=papi;	
% 	EVSET:=PAPI_L2_DCM;
% 	DISPLAY:=1;
% }

%% Accumulate L2 cache misses on L2 obj, where they belong.
% L2_MISS_L2{
% 	OBJ:=L2;
% 	EVSET:=L2_MISS_PU;
% 	PERF_LIB:=accumulate;
% 	OUTPUT:=0;
% 	DISPLAY:=1;
% }

%% Compute and output L2 miss balance
% L2_balance{
% 	OBJ:=Machine;
% 	EVSET:=L2_MISS_L2;
% 	PERF_LIB:=hierarchical;
%       %this reduction output the variance of events. Syntax: number_of_output#function
% 	REDUCTION:=1#hmonitor_evset_var;
% 	DISPLAY:=1;
% }
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% More complicated analysis (Currently experimental) %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%% Learning examples
%% Collect raw events
% raw_events{
% 	OBJ:=PU;
% 	PERF_LIB:=papi;
% 	EVSET:=PAPI_TOT_INS, PAPI_L1_DCM, PAPI_L2_DCM, PAPI_L3_TCM;
% 	OUTPUT:=0;
% }

%% Accumulate events in a single monitor, and reduce obtained events into a new set of events.
% accumulation{
% 	OBJ:=Machine;
% 	PERF_LIB:=accumulate;
% 	EVSET:=raw_events;
% 	REDUCTION:=$0, $1*$2, $1*$3, $1*$1, $2*$2, $2*$3;
% }

%% Fit first event with others event, output coefficient of determination and model parameters.
% lsq_fit{
% 	OBJ:=Machine;
% 	PERF_LIB:=hierarchical;
% 	EVSET:=accumulation;
% 	REDUCTION:=6#lsq_fit;
% 	WINDOW:=32;
% }

%% Make clusters out of raw_events. Output each sample label. WINDOW=n_samples.
% clusters{
% 	 OBJ:=Machine;
% 	 PERF_LIB:=hierarchical;
% 	 EVSET:=raw_events;
% 	 WINDOW:=8;
% 	 REDUCTION:=8#clustering;
% }
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%                             HELP                              %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%fields list
%      OBJ: Topology object where to set a monitor.
%      PERF_LIB: Performance library to gather events.
%      EVSET: List of events from PERF_LIB to gather.
%      REDUCTION: Compute output samples out of input events.
%      WINDOW: Keep track of events WINDOW(default=1) times before overwritting.
%      OUTPUT: <=0 don't print monitor, 1(default) print monitor to stdout, 2 print monitor to stderr, else path to a file.
%      DISPLAY: 0(default) do not display monitor on topology when using hmonitor utility, n display monitor n-th event.

%default REDUCTION functions (some may not be available):
%	 hmonitor_evset_var
%	 hmonitor_events_var
%	 hmonitor_events_mean
%	 hmonitor_events_sum
%	 hmonitor_events_min
%	 hmonitor_events_max

%default PERF_LIB (some may not be available) and events:
%        system (cpuload, memload, memusage, numa_local, numa_remote)
%	 papi (see papi_avail, and papi_native_avail)
%	 hierarchical (previously defined monitors)
%	 accumulate (previously defined monitors)
%	 maqao (see maqao documentation)
%	 fake  (FAKE)

%EVSET depend on PERF_LIB value. Usually list of available events is dumped when EVSET field is filled with unavailable event.
%Certain framework like PAPI also provides tools to list events.


